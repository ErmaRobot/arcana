#! /usr/bin/python3.10

#external packages
import os
import sys

#internal packages
from arc_user import rootd, create_user
#from arc_server import run_server
#from arc_client import run_client

def usage():
  print('USAGE: arcana <command | domain>')
  print('       commands: ')
  print('                 <domain>: return the password for the given domain')
  print('                 create-user: create a new user for the current login, if one doesn\'t exist')
  print('                 create-domain <domain> [password]: create a new domain with the given password')
  print('                                                    or randomly create a password if left blank')
  print('*arcana must be called using sudo')

def login():
  # fork a server and client process 
  # return Objects that correspond to those
  # roles
  return None

def arc_create_domain(cli):
  pass

def arc_get_domain(cli):
  pass

if __name__ == '__main__':
  # There should always be at least one command line argument
  if len(sys.argv) == 1:
    usage()
    exit()

  # regular expressions and other constraints
  # that are used to determine and direct user
  # input
  password_min = 15
  password_max = 32
  alpha_upper = r'[ABCDEFGHIJKLMNOPQRSTUVWXYZ]'
  alpha_lower = r'[abcdefghijklmnopqrstuvwxyz]'
  alpha_numb = r'[0123456789]'
  alpha_numeric = r'('+alpha_upper+r')|('+alpha_lower+r')|('+alpha_numb+r')'
  symbols = r'[~!@#\$%\^&\*:;,\.\?\/\\\|<>]'
  password_re = r'(('+alpha_numeric+r')|('+symbols+r')){15,32}' 
  domain_re = r'('+alpha_numeric+r'|[\.\/~])+'
  create_user_re = r'create-user'
  create_domain_re  = r'create-domain '+domain_re+r'( -p( '+password_re+r')?)?'
  get_domain_re = domain_re

  # map user input to function calls
  commands  = {
    'create-user': {'key':create_user_re, 'function':create_user},
    'create-domain': {'key':create_domain_re, 'function':arc_create_domain},
    'get-domain': {'key':get_domain_re, 'function':arc_get_domain}
  } 

  # format user input
  cli = ' '.join(sys.argv[1:])

  command_list = commands.keys()
  found_command = None
  for command in command_list:
    if re.findall(commands[command]['key'], cli) is not None:
      found_command = command
      break

  if found_command is None:
    print(f'{cli}: is not a recognized command')
    usage()
    exit(-1)

  if found_command == 'create-user':
    commands[found_command]['function']
  else:
    commands[found_command]['function'](cli)

